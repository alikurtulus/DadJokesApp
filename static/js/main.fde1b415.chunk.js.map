{"version":3,"sources":["logo.svg","Joke.js","DadJoke.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Joke","props","state","rating","emojiIndex","emojis","increaseRating","bind","decreaseRating","console","log","this","length","setState","st","color","ratingVal","className","onClick","style","borderColor","durationOut","joke","React","Component","DadJoke","jokes","handleNewJokes","e","preventDefault","getJokes","axios","get","headers","Accept","res","data","map","id","push","content","numJokesToGet","key","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fde1b415.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react'\nimport './Joke.css'\nimport { AnimateOnChange } from 'react-animation'\n\nclass Joke extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      rating:0,\n      emojiIndex:4,\n      emojis:['üò°','üò§','üò†','üôÅ','üòê','üôÇ','üòä','üòÄ','üòÅ','üòÉ','üòÑ','üòÜ','üòÇ','ü§£'],\n\n    }\n    this.increaseRating = this.increaseRating.bind(this)\n    this.decreaseRating = this.decreaseRating.bind(this)\n  }\n  increaseRating(){\n    console.log(this.state.emojis.length);\n    if(this.state.emojiIndex< this.state.emojis.length-1){\n        this.setState(st => ({rating:st.rating+1,emojiIndex:st.emojiIndex+1}))\n    }\n\n\n  }\n  decreaseRating(){\n      if(this.state.emojiIndex>0){\n          this.setState(st => ({rating:st.rating-1,emojiIndex:st.emojiIndex-1}))\n      }\n\n\n  }\n  render(){\n      let color=''\n      let ratingVal = this.state.rating\n      if(ratingVal>0 && ratingVal <= 3)\n       color = 'black'\n       else if(ratingVal > 3 && ratingVal<=6)\n       color = 'blue'\n       else if(ratingVal>6)\n       color = 'green'\n       else\n      color = 'red'\n\n\n     console.log(color);\n\n    return(\n      <div className='joke-box'>\n        <div className='rating-container'>\n           <div className='arrow-up' onClick={this.increaseRating}>\n           <i className=\"fas fa-arrow-up\"></i>\n           </div>\n           <div className='rating' style={{borderColor:color}}>\n               <AnimateOnChange durationOut={450}>\n               {this.state.rating}\n               </AnimateOnChange>\n           </div>\n           <div className='arrow-down' onClick={this.decreaseRating}>\n           <i className=\"fas fa-arrow-down\"></i>\n           </div>\n        </div>\n        <div className='joke'>\n         {this.props.joke}\n        </div>\n        <div className='emoji' >\n        <AnimateOnChange durationOut={450}>\n          {this.state.emojis[this.state.emojiIndex]}\n          </AnimateOnChange>\n        </div>\n\n      </div>\n    )\n  }\n}\nexport default Joke\n","import React from 'react'\nimport axios from 'axios'\nimport Joke from './Joke'\nimport './DadJoke.css'\n\nclass DadJoke extends React.Component{\n  static defaultProps = {\n    numJokesToGet:10\n  }\n  constructor(props){\n    super(props)\n    this.state = {\n      jokes:[],\n\n    }\n    this.handleNewJokes = this.handleNewJokes.bind(this)\n  }\n  async handleNewJokes(e){\n    e.preventDefault()\n    const jokes = await this.getJokes()\n    console.log(jokes);\n    this.setState(st => ({jokes:[...st.jokes, ...jokes]}))\n  }\n   async  getJokes(){\n     let jokes = []\n     while(jokes.length < this.props.numJokesToGet)\n     {\n       const url = `https://icanhazdadjoke.com/`\n       let res = await axios.get(url,{headers:{Accept:'application/json'}})\n       let data = res.data\n       if(jokes.length === 0){\n         jokes.push({id:data.id,content:data.joke})\n       }\n       else if (jokes.length>0) {\n         const joke =  jokes.map(joke => joke.id !== data.id)\n         if(joke)\n         jokes.push({id:data.id,content:data.joke})\n       }\n\n     }\n     return jokes\n\n  }\n  async componentDidMount(){\n       const jokes = await this.getJokes()\n        this.setState({jokes:jokes})\n\n  }\n  render(){\n    const jokes = this.state.jokes.map(joke =>\n      <Joke key={joke.id} joke={joke.content}    />\n    )\n    return(\n      <div className='section'>\n         <div className='container'>\n           <div className='new-jokes-container'>\n              <h1>Dad Jokes</h1>\n               <p className='joke-emoji'>üòÇ</p>\n              <button onClick={this.handleNewJokes} className='new-jokes-btn'>New Jokes</button>\n           </div>\n           <div className='jokes-container'>\n               {jokes}\n           </div>\n         </div>\n      </div>\n    )\n  }\n}\nexport default DadJoke\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport DadJoke from './DadJoke'\n\nclass App extends React.Component{\n  render(){\n    return(\n      <DadJoke />\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}